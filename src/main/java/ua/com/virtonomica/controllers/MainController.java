package ua.com.virtonomica.controllers;import com.fasterxml.jackson.core.type.TypeReference;import com.fasterxml.jackson.databind.ObjectMapper;import com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.PropertySource;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.GetMapping;import org.telegram.telegrambots.ApiContextInitializer;import org.telegram.telegrambots.TelegramBotsApi;import org.telegram.telegrambots.exceptions.TelegramApiRequestException;import ua.com.virtonomica.Bot;import ua.com.virtonomica.service.industrial.unit_type.UnitTypeService;import ua.com.virtonomica.service.product.main_product.MainProductService;import ua.com.virtonomica.utils.reports.MarketingReport;import ua.com.virtonomica.web.api.VirtonomicaAPI;import ua.com.virtonomica.web.api.analysis.industry_analysis.factory_info.FactoryInfo;import ua.com.virtonomica.web.api.analysis.industry_analysis.factory_info.SpecializationMaterials;import ua.com.virtonomica.web.api.analysis.industry_analysis.factory_info.UnitSpecialization;import java.io.File;import java.io.IOException;import java.util.*;import java.util.stream.Stream;@Controller@PropertySource("classpath:entry.properties")public class MainController {    private final Logger logger = LoggerFactory.getLogger(this.getClass());    @Autowired    VirtonomicaAPI virtonomicaAPI;    @Autowired    UnitTypeService unitTypeService;    @Autowired    MainProductService mainProductService;    @GetMapping("/")    private String Start (){        ApiContextInitializer.init();        TelegramBotsApi telegramBotsApi = new TelegramBotsApi();        try {            ObjectMapper mapper = new ObjectMapper();            HashSet<String>products=new HashSet<>();            try {                TypeReference<List<FactoryInfo>> ref = new TypeReference<List<FactoryInfo>>() {};                List<FactoryInfo> factoryInfos = mapper.readValue(new File("factory_info.json"), ref);                for (FactoryInfo factoryInfo : factoryInfos) {                    List<UnitSpecialization> unitSpecialization = factoryInfo.getUnitSpecializations();                    for (UnitSpecialization specialization : unitSpecialization) {                        List<SpecializationMaterials> materials = specialization.getMaterials();                        for (SpecializationMaterials material : materials) {                            String product = material.getMaterial();                            products.add(product);//                            System.out.println(material);                        }                    }                }                for (String product : products) {                    long productId = mainProductService.findByName(product).getId();                    LinkedHashMap<Long, List<MarketingReport>> reportLargestStores = virtonomicaAPI.getReportLargestStores(productId);                    System.out.println("======================================");                    reportLargestStores.forEach((k,v)-> System.out.println(k+": "+v));                    System.out.println("product: "+ product);                    virtonomicaAPI.getTradeOffersByProductId(productId);                }            } catch (IOException e) {                e.printStackTrace();            }            telegramBotsApi.registerBot(new Bot());            logger.info("Start Bot");        } catch (TelegramApiRequestException | NullPointerException e) {            e.printStackTrace();        }        return "index";    }}